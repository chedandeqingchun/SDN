#include <iostream>
using namespace std;

class slist {
  typedef struct _linkNode {
    linkNode *next, *prev;
    int data;
  } linkNode;

  auto_ptr<linkNode> *head, *tail;

  linkNode& _createNode(const int& value) {
    linkNode *obj = NULL;

    obj = new linkNode();
    if (NULL != obj) {
      obj->data = value;
    }
    return obj;
  }

  void _splitList(linkNode *head, linkNode *prev, linkNode *next) {
    linkNode* slowPtr, fastPtr; 
    slowPtr = fastPtr = head;

    while (fastPtr != NULL) {
      fastPtr = fastPtr->next;
      
      if (fastPtr != NULL) {
        fastPtr = fastPtr->next;
      }
    }

    fastPtr = slow->next;
    slow->next = NULL;
    fastPtr->prev = NULL;




  }

  public:
    slist() {
      head = tail = NULL;
    }
    void push_back(const int& value) {
      linkNode *obj;
      obj = _createNode(value);
      if (head = NULL) {
        tail = head = obj;
        obj->prev = obj->next = NULL;
      } else {
        if (obj != NULL) {
          obj->next = tail->next;
          obj->prev = tail;
          tail->next = obj;
          tail = obj;
        }
      }
    }

    linkNode& pop_back() {
      linkNode *obj;
      obj = tail;
      tail = obj->prev;
      tail->next = obj->next; 
      return *result;
    }

    void sort() {
        mergeList();
    }
}

int main(void) {
  slist l;

  l.push_back(12);
  l.push_back(45);
  l.push_back(54);
  l.push_back(63);
  l.push_back(1);
  l.push_back(7);
  l.push_back(2);
  l.push_back(5);

  listsort(l);

  copy(l.begin(), l.end(), ostream_iterator<int>(cout, " "));

  return 0;
}
